x-db-env: &db_env
  DATABASE_URL: postgres://nzbidx:nzbidx@postgres:5432/nzbidx
  PGDATABASE: nzbidx
  PGUSER: nzbidx
  PGPASSWORD: nzbidx
  POSTGRES_PORT: 5432

services:
  nzbidx:
    image: nzbidx:latest
    ports:
      - "8080:8080"
    healthcheck:
      test:
        [
          "CMD",
          "python",
          "-c",
          "import urllib.request,sys; sys.exit(urllib.request.urlopen('http://localhost:8080/health').getcode()!=200)",
        ]
      interval: 10s
      timeout: 5s
      retries: 5
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      NZBIDX_USE_STD_JSON: ${NZBIDX_USE_STD_JSON:-1} # set to 0 to enable orjson
      <<: *db_env
      API_KEYS: dev
      RATE_LIMIT: 60
      RATE_WINDOW: 60
      RATE_LIMIT_MAX_IPS: 1024
      NNTP_HOST: ""
      NNTP_PORT: 119
      NNTP_USER: ""
      NNTP_PASS: ""
      NNTP_GROUPS: ""
      NNTP_TOTAL_TIMEOUT: 600
      NZB_TIMEOUT_SECONDS: 600 # should be â‰¥ NNTP_TOTAL_TIMEOUT
      SEARCH_TTL_SECONDS: 60
  maintenance:
    image: nzbidx:latest
    depends_on:
      postgres:
        condition: service_healthy
    command: ["python", "scripts/db_maintenance.py"]
    environment:
      <<: *db_env
      MAX_RELEASE_BYTES: ${MAX_RELEASE_BYTES:-0}
      CATEGORY_MIN_SIZES: ${CATEGORY_MIN_SIZES:-}
      RELEASE_MIN_SIZES: ${RELEASE_MIN_SIZES:-}
      RELEASE_RETENTION_DAYS: ${RELEASE_RETENTION_DAYS:-0}
    restart: unless-stopped
  postgres:
    image: pgvector/pgvector:pg17
    environment:
      POSTGRES_DB: nzbidx
      POSTGRES_USER: nzbidx
      POSTGRES_PASSWORD: nzbidx
    volumes:
      - ./db/init/schema.sql:/docker-entrypoint-initdb.d/schema.sql:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5
