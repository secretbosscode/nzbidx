version: '3.9'
services:
  api:
    build: ./services/api
    env_file:
      - .env.example
    ports:
      - "8080:8080"
    read_only: true
    tmpfs:
      - /tmp
    cap_drop:
      - ALL
    healthcheck:
      test:
        [
          "CMD",
          "python",
          "-c",
          "import urllib.request,sys; sys.exit(urllib.request.urlopen('http://localhost:8080/health').getcode()!=200)",
        ]
      interval: 10s
      timeout: 5s
      retries: 5
    depends_on:
      opensearch:
        condition: service_healthy
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      API_KEYS: dev
      SEARCH_TTL_SECONDS: 60
      RATE_LIMIT: 60
      RATE_WINDOW: 60
  ingest:
    build: ./services/ingest
    env_file:
      - .env.example
    depends_on:
      opensearch:
        condition: service_healthy
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    read_only: true
    tmpfs:
      - /tmp
    cap_drop:
      - ALL
    command: python -m nzbidx_ingest
  opensearch:
    image: opensearchproject/opensearch:2
    environment:
      - discovery.type=single-node
      - plugins.security.disabled=true
    ports:
      - "9200:9200"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9200"]
      interval: 10s
      timeout: 5s
      retries: 5
  postgres:
    image: postgres:16
    env_file:
      - .env.example
    volumes:
      - ./db/init/schema.sql:/docker-entrypoint-initdb.d/schema.sql:ro
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
